@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant "e:ExportCommand" as ExportCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
participant "e:CommandException" as CommandException LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

box java.nio.file
participant ":Path" as Path
end box

box java.io
participant "csvFile:File" as csvFile
participant "csvParentDirectory:File" as csvParentDirectory
end box

box com.fasterxml.jackson.databind
participant ":ObjectMapper" as ObjectMapper
participant "jsonTree:JsonNode" as JsonTree
participant "personsArray:JsonNode" as PersonsArray
end box

box com.fasterxml.jackson.dataformat.csv
participant ":CsvSchema" as CsvSchema
participant "csvSchemaBuilder:Builder" as Builder
end box

[-> LogicManager : execute("export")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("export")
activate AddressBookParser

create ExportCommand
AddressBookParser -> ExportCommand
activate ExportCommand

ExportCommand --> AddressBookParser : e
deactivate ExportCommand

AddressBookParser --> LogicManager : e
deactivate AddressBookParser

LogicManager -> ExportCommand : execute(m)
activate ExportCommand

ExportCommand -> Model : getAddressBookFilePath()
activate Model

Model --> ExportCommand : jsonFilePath
deactivate Model

ExportCommand -> Path : toFile()
activate Path

Path --> ExportCommand : jsonFile
deactivate Path

create csvFile
ExportCommand -> csvFile : new File(csvFilePath)
activate csvFile

csvFile --> ExportCommand : csvFile
deactivate csvFile

'createCsvDirectory method
ExportCommand -> ExportCommand : createCsvDirectory(csvFile)
activate ExportCommand

create csvParentDirectory
ExportCommand -> csvParentDirectory : getParentFile()
activate csvParentDirectory

csvParentDirectory --> ExportCommand : csvParentDirectory
deactivate csvParentDirectory

ExportCommand -> csvParentDirectory : exists()
activate csvParentDirectory

csvParentDirectory --> ExportCommand : existsResult
deactivate csvParentDirectory

alt !existsResult
    ExportCommand -> csvParentDirectory : mkdir()
    activate csvParentDirectory

    csvParentDirectory --> ExportCommand : isCreated
    deactivate csvParentDirectory

    alt !isCreated
        create CommandException
        ExportCommand -> CommandException : CommandException("Could not create directory for CSV file.")
        activate CommandException

        CommandException --> ExportCommand : e
        deactivate CommandException

        ExportCommand --> LogicManager : e

        destroy CommandException
    end
end

ExportCommand --> ExportCommand
deactivate ExportCommand

'readJsonFile method
ExportCommand -> ExportCommand : readJsonFile(jsonFile)
activate ExportCommand

create ObjectMapper
ExportCommand -> ObjectMapper : new ObjectMapper()
activate ObjectMapper

ObjectMapper --> ExportCommand
deactivate ObjectMapper

ExportCommand -> ObjectMapper : readTree(jsonFile)
activate ObjectMapper

create JsonTree
ObjectMapper -> JsonTree : ObjectMapper.readTree(jsonFile)
activate JsonTree

JsonTree --> ObjectMapper : jsonTree
deactivate JsonTree

ObjectMapper --> ExportCommand : jsonTree
deactivate ObjectMapper

ExportCommand --> ExportCommand : jsonTree
deactivate ExportCommand

'readPersonsArray method
ExportCommand -> ExportCommand : readPersonsArray(jsonTree)
activate ExportCommand

ExportCommand -> JsonTree : get("persons")
activate JsonTree

create PersonsArray
JsonTree -> PersonsArray : jsonTree.get("persons")
activate PersonsArray

PersonsArray --> JsonTree : personsArray
deactivate PersonsArray

JsonTree --> ExportCommand : personsArray
deactivate JsonTree

ExportCommand --> ExportCommand : personsArray
deactivate ExportCommand

'writeToCsvFile method
ExportCommand -> ExportCommand : writeToCsvFile(csvFile, personsArray)
activate ExportCommand



ExportCommand --> ExportCommand
deactivate ExportCommand

'create CommandResult
'ExportCommand -> CommandResult
'activate CommandResult
'
'CommandResult --> ExportCommand
'deactivate CommandResult
'
'ExportCommand --> LogicManager : r
'deactivate ExportCommand

[<--LogicManager
deactivate LogicManager
@enduml
